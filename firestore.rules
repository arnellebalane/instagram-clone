rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function validateCreatePostRequest() {
      let fields = ['caption', 'photoURL', 'datePosted', 'likesCount', 'commentsCount', 'latestComments', 'author'];
      return request.auth != null
        && request.resource.data.keys().hasAll(fields)
        && request.resource.data.keys().hasOnly(fields)
        && request.resource.data.author.id == request.auth.uid
        && request.resource.data.datePosted == request.time
        && request.resource.data.likesCount == 0
        && request.resource.data.commentsCount == 0
        && request.resource.data.latestComments == []
        && request.resource.data.caption is string
        && request.resource.data.photoURL is string;
    }

    function validateUpdateUserRequest(user) {
      return request.auth != null
        && request.auth.uid == user
        && request.writeFields.hasAll(['postsCount'])
        && request.writeFields.hasOnly(['postsCount'])
        && request.resource.data.postsCount == resource.data.postsCount + 1;
    }

    match /posts/{post} {
      allow read: if request.auth != null;
      allow create: if validateCreatePostRequest();

      match /comments/{comment} {
        allow read;
      }
    }

    match /users/{user} {
      allow read: if request.auth != null;
      allow update: if validateUpdateUserRequest(user);

      match /likes/{like} {
        allow read;
      }
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}
